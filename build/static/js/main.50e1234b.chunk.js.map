{"version":3,"sources":["game.js","App.js","reportWebVitals.js","index.js"],"names":["Game","props","componentDidMount","document","addEventListener","jump","dino","getElementById","classList","add","contains","setTimeout","remove","state","over","score","setInterval","cactus","dinoTop","parseInt","window","getComputedStyle","getPropertyValue","cactusLeft","setState","style","animation","display","textAlign","className","id","this","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6MA4EeA,E,kDAvEX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAMVC,kBAAkB,WACdC,SAASC,iBAAiB,UAAU,EAAKC,OAR3B,EAUlBA,KAAK,WACD,IAAMC,EAAOH,SAASI,eAAe,QACrCD,EAAKE,UAAUC,IAAI,QAChBH,EAAKE,UAAUE,SAAS,SACvBC,YAAW,WAAKL,EAAKE,UAAUI,OAAO,UAAW,MAZrD,EAAKC,MAAM,CACPC,MAAK,EACLC,MAAM,GAJI,E,qDAmBT,IAAD,OA6BJ,OA5BAC,aAAY,WACR,IAAMC,EAASd,SAASI,eAAe,UAEjCD,EAAOH,SAASI,eAAe,QAC/BW,EAAUC,SAASC,OAAOC,iBAAiBf,GAAMgB,iBAAiB,QAClEC,EAAaJ,SAASC,OAAOC,iBAAiBJ,GAAQK,iBAAiB,SAG3EJ,EAAQ,KAAOK,EAAW,GAAMA,EAAW,KAEzC,EAAKC,SAAS,CAACV,MAAK,IACpBG,EAAOQ,MAAMC,UAAW,QAGzBR,EAAQ,KAAOK,EAAW,GAAMA,EAAW,IAE1C,EAAKC,SAAS,CAACT,MAAM,EAAKF,MAAME,MAAM,IAMtCE,EAAOQ,MAAME,QADdJ,EAAW,EACW,OAEA,KAG3B,GAEE,gCACI,oBAAIE,MAAO,CAACG,UAAU,UAAtB,uBACA,sBAAKC,UAAU,YAAf,UACI,qBAAKA,UAAU,OAAOC,GAAG,SAGzB,qBAAKD,UAAU,SAASC,GAAG,cAK/B,sBAAKD,UAAU,QAAf,UACQ,0CAAaE,KAAKlB,MAAME,SACvBgB,KAAKlB,MAAMC,KAAK,4CAAc,uBAAd,6CAAgE,e,GA/DnFkB,IAAMC,WCObC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAASI,eAAe,SAM1B4B,K","file":"static/js/main.50e1234b.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport \"./App.css\";\r\n\r\n class  Game extends  React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            over:false,\r\n            score:0\r\n        }\r\n    }\r\n    componentDidMount=()=>{\r\n        document.addEventListener(\"keydown\",this.jump)\r\n    }\r\n    jump=()=>{\r\n        const dino = document.getElementById(\"dino\");\r\n        dino.classList.add(\"jump\");\r\n        if(dino.classList.contains(\"jump\")){\r\n            setTimeout(()=>{dino.classList.remove(\"jump\");} ,300);\r\n        }\r\n        \r\n       \r\n    }\r\n    render(){\r\n        setInterval(() => {\r\n            const cactus = document.getElementById(\"cactus\");\r\n            \r\n            const dino = document.getElementById(\"dino\");\r\n            const dinoTop = parseInt(window.getComputedStyle(dino).getPropertyValue('top'))\r\n            const cactusLeft = parseInt(window.getComputedStyle(cactus).getPropertyValue('left'));\r\n            \r\n           \r\n           if(dinoTop>175 && cactusLeft>0 &&  cactusLeft<50){\r\n              \r\n                this.setState({over:true});\r\n                cactus.style.animation =\"none\";\r\n\r\n            }\r\n            if(dinoTop<175 && cactusLeft>0 &&  cactusLeft<50){\r\n              \r\n                this.setState({score:this.state.score+1});\r\n            }\r\n            \r\n                \r\n            \r\n            if(cactusLeft<0){\r\n                cactus.style.display=\"none\";\r\n            }else{\r\n                cactus.style.display=\"\";\r\n            }\r\n            \r\n        },1);\r\n        return (\r\n            <div>\r\n                <h1 style={{textAlign:\"center\"}}>Dino Trex</h1>\r\n                <div className=\"container\">\r\n                    <div className=\"dino\" id=\"dino\">\r\n    \r\n                    </div>\r\n                    <div className=\"cactus\" id=\"cactus\">\r\n    \r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"score\">\r\n                        <h4>Score : {this.state.score}</h4>\r\n                        {this.state.over?<h4>Game over <br/>Refresh the screen to continue the game</h4>:null}\r\n\r\n                    </div>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n \r\n}\r\nexport default Game;\r\n","\nimport './App.css';\nimport Game from \"./game\"\nfunction App() {\n  return (\n    <div>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}